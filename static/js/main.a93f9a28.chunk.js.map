{"version":3,"sources":["Form.js","App.js","registerServiceWorker.js","index.js"],"names":["Form","state","firstName","lastName","username","email","password","change","e","target","name","value","props","onChange","setState","onSubmit","preventDefault","placeholder","this","type","onClick","React","Component","App","fields","updatedValue","className","JSON","stringify","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"0QAEqBA,E,4MACpBC,MAAQ,CACPC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,I,EAGXC,OAAS,SAACC,GAAO,IAAD,EACSA,EAAEC,OAAlBC,EADO,EACPA,KAAMC,EADC,EACDA,MACd,EAAKC,MAAMC,SAAX,eAAuBH,EAAOC,IAC9B,EAAKG,SAAL,eACEJ,EAAOC,K,EAIVI,SAAW,SAACP,GACXA,EAAEQ,iBACF,EAAKF,SAAS,CACbZ,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,KAEX,EAAKM,MAAMC,SAAS,CACnBX,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,M,uDAIF,IAAD,OACR,OACC,8BACC,gDACA,2BACCI,KAAK,YACLO,YAAY,aACZN,MAAOO,KAAKjB,MAAMC,UAClBW,SAAU,SAACL,GAAD,OAAO,EAAKD,OAAOC,MAE9B,6BACA,2BACCE,KAAK,WACLO,YAAY,YACZN,MAAOO,KAAKjB,MAAME,SAClBU,SAAU,SAACL,GAAD,OAAO,EAAKD,OAAOC,MAE9B,6BACA,2BACCE,KAAK,WACLO,YAAY,WACZN,MAAOO,KAAKjB,MAAMG,SAClBS,SAAU,SAACL,GAAD,OAAO,EAAKD,OAAOC,MAE9B,6BACA,2BACCE,KAAK,QACLO,YAAY,QACZN,MAAOO,KAAKjB,MAAMI,MAClBQ,SAAU,SAACL,GAAD,OAAO,EAAKD,OAAOC,MAE9B,6BACA,2BACCE,KAAK,WACLS,KAAK,WACLF,YAAY,WACZN,MAAOO,KAAKjB,MAAMK,SAClBO,SAAU,SAACL,GAAD,OAAO,EAAKD,OAAOC,MAE9B,6BACA,6BACA,4BAAQY,QAAS,SAACZ,GAAD,OAAO,EAAKO,SAASP,KAAtC,e,GA5E8Ba,IAAMC,WC0BzBC,E,4MAvBdtB,MAAQ,CACPuB,OAAQ,I,EAGTX,SAAW,SAACY,GACX,EAAKX,SAAS,CACbU,OAAO,2BACH,EAAKvB,MAAMuB,QACXC,M,uDAKI,IAAD,OACR,OACC,yBAAKC,UAAU,OACd,kBAAC,EAAD,CAAMb,SAAU,SAACW,GAAD,OAAY,EAAKX,SAASW,MAC1C,2BAAIG,KAAKC,UAAUV,KAAKjB,MAAMuB,OAAQ,KAAM,S,GAlB9BF,aCMZO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1C,QACfoC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,oCAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,oCAAN,sBAEN3B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAoB,CAAwBhC,GAHxBD,EAAgBC,OC7BxBiC,I","file":"static/js/main.a93f9a28.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Form extends React.Component {\n\tstate = {\n\t\tfirstName: \"\",\n\t\tlastName: \"\",\n\t\tusername: \"\",\n\t\temail: \"\",\n\t\tpassword: \"\",\n\t};\n\n\tchange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tthis.props.onChange({ [name]: value });\n\t\tthis.setState({\n\t\t\t[name]: value,\n\t\t});\n\t};\n\n\tonSubmit = (e) => {\n\t\te.preventDefault();\n\t\tthis.setState({\n\t\t\tfirstName: \"\",\n\t\t\tlastName: \"\",\n\t\t\tusername: \"\",\n\t\t\temail: \"\",\n\t\t\tpassword: \"\",\n\t\t});\n\t\tthis.props.onChange({\n\t\t\tfirstName: \"\",\n\t\t\tlastName: \"\",\n\t\t\tusername: \"\",\n\t\t\temail: \"\",\n\t\t\tpassword: \"\",\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<form>\n\t\t\t\t<h3>Regitration form</h3>\n\t\t\t\t<input\n\t\t\t\t\tname=\"firstName\"\n\t\t\t\t\tplaceholder=\"First name\"\n\t\t\t\t\tvalue={this.state.firstName}\n\t\t\t\t\tonChange={(e) => this.change(e)}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<input\n\t\t\t\t\tname=\"lastName\"\n\t\t\t\t\tplaceholder=\"Last name\"\n\t\t\t\t\tvalue={this.state.lastName}\n\t\t\t\t\tonChange={(e) => this.change(e)}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<input\n\t\t\t\t\tname=\"username\"\n\t\t\t\t\tplaceholder=\"Username\"\n\t\t\t\t\tvalue={this.state.username}\n\t\t\t\t\tonChange={(e) => this.change(e)}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<input\n\t\t\t\t\tname=\"email\"\n\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\tvalue={this.state.email}\n\t\t\t\t\tonChange={(e) => this.change(e)}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<input\n\t\t\t\t\tname=\"password\"\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\tvalue={this.state.password}\n\t\t\t\t\tonChange={(e) => this.change(e)}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t<button onClick={(e) => this.onSubmit(e)}>Submit</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form\";\n\nclass App extends Component {\n\tstate = {\n\t\tfields: {},\n\t};\n\n\tonChange = (updatedValue) => {\n\t\tthis.setState({\n\t\t\tfields: {\n\t\t\t\t...this.state.fields,\n\t\t\t\t...updatedValue,\n\t\t\t},\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Form onChange={(fields) => this.onChange(fields)} />\n\t\t\t\t<p>{JSON.stringify(this.state.fields, null, 2)}</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}